// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}


datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
   url      = env("DATABASE_URL")
    relationMode = "prisma"
}


model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
enum Role {
    USER
    ADMIN
}
model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Restaurant {
   id    String    @id @default(cuid())
   name String @db.VarChar(255)
   address String?  
   cityName String  
   stateName String 
   zipCode String 
   email String? 
   phone String?
   website String? 
   hoursInterval String?  
   lat String @default("0")
   lng String @default("0")
   created_at  DateTime @default(now())   

   cuisines RestaurantCuisine[]
}   
model RestaurantApplication {
   id    String    @id @default(cuid())
   name String @db.VarChar(255)
   address String?  
   cityName String  
   stateName String 
   zipCode String 
   email String? 
   phone String?
   website String? 
   hoursInterval String?  
   created_by_user_id String 
   status String 
   lat String @default("0")
    lng String @default("0")
   created_at  DateTime @default(now())   
}   
model UsersRestaurantApplication {
    id String @id @default(cuid())
    created_by_user_id String
    restaurant_id String?
    application_id String?
    status String
    created_at  DateTime @default(now())

}
model Comment {
  id     String    @id @default(cuid())
  text  String @db.VarChar(255)
  created_at  DateTime @default(now())
  user_id  String
  restaurant_id String
}
model Favorite {
    id String @id @default(cuid())
    user_id String
    restaurant_id String
    placement Int?  


    @@unique([user_id, restaurant_id])
}
model DownVote {
    id String @id @default(cuid())
    user_id String
    restaurant_id String
       
    @@unique([user_id, restaurant_id])
}
model UpVote {
    id String @id @default(cuid())
    user_id String
    restaurant_id String
      
    @@unique([user_id, restaurant_id])
}
model Photo {
    id String @id @default(cuid())
    photoUrl String
    restaurant_id String?
    comment_id String?
    application_id String?
}
model ReportedPhoto {
    id String @id @default(cuid())
    photo_id String
    restaurant_id String?
    comment_id String?
}
model SavedRestaurants {
    id String @id @default(cuid())
    user_id String
    restaurant_id String
      
    @@unique([user_id, restaurant_id])
}
model UsersRestaurant {
    id String @id @default(cuid())
    user_id String
    restaurant_id String
      
    @@unique([user_id, restaurant_id])
}
model Menu {
    id String @id @default(cuid())
    photoUrl String
    restaurant_id String?
}
model Cuisine {
    id String @id @default(cuid())
    name String


    RestaurantCuisines RestaurantCuisine[]
    @@unique([name])
}
model RestaurantCuisine {
    restaurant_id String
    cuisine_id String
    restaurant Restaurant @relation(fields: [restaurant_id], references: [id])
    cuisine Cuisine @relation(fields: [cuisine_id], references: [id])
    @@id([restaurant_id, cuisine_id])
    @@index([restaurant_id, cuisine_id])
    @@unique([restaurant_id, cuisine_id])
}