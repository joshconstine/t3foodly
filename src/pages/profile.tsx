import { type NextPage } from "next";
import Head from "next/head";
import { api } from "../utils/api";
import Layout from "../components/Layout";
import { useEffect, useState } from "react";
import Image from "next/image";
import FavoriteContainer from "../components/Favorites/FavoriteContainer";
import Dialog from "@mui/material/Dialog";
import EditOutlinedIcon from "@mui/icons-material/EditOutlined";
import { signIn, signOut, useSession } from "next-auth/react";
import { IconButton } from "@mui/material";
const Profile: NextPage = () => {
  const user = api.user.getUser.useQuery();
  const updateUsername = api.user.updateUsername.useMutation();
  const { data: sessionData } = useSession();

  const [isEditMode, setIsEditMode] = useState(false);
  const [showUserNameModal, setShowUserNameModal] = useState(false);
  const favorites = api.favorite.getByUserId.useQuery({
    id: String(user.data?.id),
  });
  const savedRestaurants = api.savedRestaurant.getByUserId.useQuery({
    id: String(user.data?.id),
  });
  const myRestaurants = api.usersRestaurant.getByUserId.useQuery({
    id: String(user.data?.id),
  });
  const [favoriteList, setFavoriteList] = useState(favorites.data || []);
  const [savedList, setSavedList] = useState(savedRestaurants.data || []);
  useEffect(() => {
    setFavoriteList(favorites.data || []);
  }, [favorites.data]);
  useEffect(() => {
    setSavedList(savedRestaurants.data || []);
  }, [savedRestaurants.data]);

  useEffect(() => {
    if (user.data?.username === null) {
      setShowUserNameModal(true);
      setIsEditMode(true);
    }
  }, [user.data?.username]);

  const handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = e.currentTarget;
    const formElements = form.elements as typeof form.elements & {
      newUsername: { value: string };
    };
    updateUsername.mutate(
      { username: formElements.newUsername.value },
      {
        async onSuccess() {
          await user.refetch();
        },
      }
    );
    setIsEditMode(false);
  };

  return (
    <>
      <Head>
        <title>Foodley</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {" "}
        <section className="py-2 md:py-4">
          <div className="mx-auto  max-w-3xl px-4  lg:px-8">
            <div className="container ">
              <div className=" flex flex-col">
                <Dialog
                  open={showUserNameModal}
                  onClose={() => setShowUserNameModal(false)}
                >
                  <div className="flex flex-col items-center justify-center text-xl text-primary">
                    <h1 className="text-2xl">Please enter a username</h1>
                    {isEditMode && (
                      <form
                        onSubmit={handleSubmit}
                        className="flex w-48 flex-col"
                      >
                        <input
                          name="newUsername"
                          placeholder="Username"
                          className="w-full rounded-full bg-gray-100 py-2 px-8 focus:outline-none "
                        ></input>
                        <button
                          type="submit"
                          className="rounded-full bg-green-500 py-2 px-4 font-bold text-white hover:bg-green-700"
                        >
                          Save
                        </button>
                      </form>
                    )}
                  </div>
                </Dialog>
                <div className="flex flex-col gap-2 md:flex-row">
                  <div className="avatar">
                    <div className="w-24 rounded border-2 border-zinc-600">
                      <Image
                        width={60}
                        height={60}
                        src={user.data?.image || ""}
                        alt="Profile Image"
                      />
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    {isEditMode ? (
                      <>
                        <form
                          onSubmit={handleSubmit}
                          className="flex w-48 flex-col"
                        >
                          <input
                            name="newUsername"
                            placeholder={user.data?.username || ""}
                            className="input-bordered input-primary input w-full max-w-xs"
                          ></input>
                        </form>
                        <button className="btn-primary btn" type="submit">
                          save
                        </button>{" "}
                        <button
                          className="btn-secondary btn-outline btn"
                          onClick={() => setIsEditMode(false)}
                        >
                          cancel
                        </button>
                      </>
                    ) : (
                      <>
                        <h3 className="text-xl font-bold text-primary ">
                          {user.data?.username}
                        </h3>
                        <IconButton onClick={() => setIsEditMode(true)}>
                          <EditOutlinedIcon />
                        </IconButton>
                      </>
                    )}
                  </div>
                </div>
                <div className="divider-primary divider"></div>
                <h3 className="text-md mb-2 "> 5 reviews </h3>
              </div>
              <FavoriteContainer
                favoriteList={favoriteList}
                setFavoriteList={setFavoriteList}
              />{" "}
              {/* <RestaurantCardContainer list={savedList} title="saved" /> */}
              {/* <RestaurantCardContainer
                  list={myRestaurants.data}
                  title="My restaurants"
                /> */}
              <button
                onClick={
                  sessionData ? () => void signOut() : () => void signIn()
                }
                className={
                  sessionData
                    ? "btn-secondary btn-outline btn"
                    : "btn-secondary btn-outline btn"
                }
              >
                {sessionData ? "Sign out" : "Sign in"}
              </button>
            </div>
          </div>
        </section>
      </Layout>
    </>
  );
};

export default Profile;
