import { type NextPage } from "next";
import Head from "next/head";
import { api } from "../utils/api";
import Layout from "../components/Layout";
import { useEffect, useState } from "react";
import Image from "next/image";
import FavoriteContainer from "../components/Favorites/FavoriteContainer";
import RestaurantCardContainer from "../components/RestaurantCards/RestaurantCardContainer";
import Dialog from "@mui/material/Dialog";
import EditOutlinedIcon from "@mui/icons-material/EditOutlined";
import { signIn, signOut, useSession } from "next-auth/react";
import { IconButton } from "@mui/material";
const Profile: NextPage = () => {
  const user = api.user.getUser.useQuery();
  const updateUsername = api.user.updateUsername.useMutation();
  const { data: sessionData } = useSession();

  const [isEditMode, setIsEditMode] = useState(false);
  const [showUserNameModal, setShowUserNameModal] = useState(false);
  const favorites = api.favorite.getByUserId.useQuery({
    id: String(user.data?.id),
  });
  const savedRestaurants = api.savedRestaurant.getByUserId.useQuery({
    id: String(user.data?.id),
  });
  const myRestaurants = api.usersRestaurant.getByUserId.useQuery({
    id: String(user.data?.id),
  });
  const [favoriteList, setFavoriteList] = useState(favorites.data || []);
  const [savedList, setSavedList] = useState(savedRestaurants.data || []);
  useEffect(() => {
    setFavoriteList(favorites.data || []);
  }, [favorites.data]);
  useEffect(() => {
    setSavedList(savedRestaurants.data || []);
  }, [savedRestaurants.data]);

  useEffect(() => {
    if (user.data?.username === null) {
      setShowUserNameModal(true);
      setIsEditMode(true);
    }
  }, [user.data?.username]);

  const handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = e.currentTarget;
    const formElements = form.elements as typeof form.elements & {
      newUsername: { value: string };
    };
    updateUsername.mutate(
      { username: formElements.newUsername.value },
      {
        async onSuccess() {
          await user.refetch();
        },
      }
    );
    setIsEditMode(false);
  };

  return (
    <>
      <Head>
        <title>Foodley</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {" "}
        <section className="bg-gray-100 py-12">
          <div className="mx-auto  max-w-7xl px-4 sm:px-6 lg:px-8">
            <div className="container mx-auto px-4 py-10">
              <div className="-mx-4 flex flex-col flex-wrap">
                <Dialog
                  open={showUserNameModal}
                  onClose={() => setShowUserNameModal(false)}
                >
                  <div className="flex flex-col items-center justify-center text-xl text-primary">
                    <h1 className="text-2xl">Please enter a username</h1>
                    {isEditMode && (
                      <form
                        onSubmit={handleSubmit}
                        className="flex w-48 flex-col"
                      >
                        <input
                          name="newUsername"
                          placeholder="Username"
                          className="w-full rounded-full bg-gray-100 py-2 px-8 focus:outline-none "
                        ></input>
                        <button
                          type="submit"
                          className="rounded-full bg-green-500 py-2 px-4 font-bold text-white hover:bg-green-700"
                        >
                          Save
                        </button>
                      </form>
                    )}
                  </div>
                </Dialog>
                <div className="mb-4 flex w-full flex-col rounded-md bg-white p-4 px-4 md:w-1/3 ">
                  <div className="flex items-center justify-between">
                    <Image
                      width={60}
                      height={60}
                      className="rounded-full"
                      src={user.data?.image || ""}
                      alt="Profile Image"
                    />
                    <div className="flex content-center items-center">
                      <IconButton onClick={() => setIsEditMode(true)}>
                        <EditOutlinedIcon></EditOutlinedIcon>
                      </IconButton>
                      <h3 className="mb-2 text-xl ">{user.data?.username}</h3>
                    </div>
                  </div>
                  <div className="p-4">
                    {isEditMode && (
                      <form
                        onSubmit={handleSubmit}
                        className="flex w-48 flex-col"
                      >
                        <input
                          name="newUsername"
                          className="border-2 bg-gray-200"
                        ></input>
                        <button className="border-2 bg-gray-200" type="submit">
                          save
                        </button>{" "}
                        <button
                          className="border-2 bg-gray-200"
                          onClick={() => setIsEditMode(false)}
                        >
                          cancel
                        </button>
                      </form>
                    )}
                    <div>
                      <button
                        onClick={
                          sessionData
                            ? () => void signOut()
                            : () => void signIn()
                        }
                        className={
                          sessionData
                            ? "rounded-full border-2  border-secondary bg-transparent  py-2 px-2 text-sm "
                            : "rounded-full bg-secondary  text-sm"
                        }
                      >
                        {sessionData ? "Sign out" : "Sign in"}
                      </button>
                    </div>
                    {user.data?.role === "ADMIN" && (
                      <p className="mb-2 text-gray-700">
                        Role: {user.data?.role}
                      </p>
                    )}
                  </div>
                </div>
                <FavoriteContainer
                  favoriteList={favoriteList}
                  setFavoriteList={setFavoriteList}
                />{" "}
                {/* <RestaurantCardContainer list={savedList} title="saved" /> */}
                {/* <RestaurantCardContainer
                  list={myRestaurants.data}
                  title="My restaurants"
                /> */}
              </div>
            </div>
          </div>
        </section>
      </Layout>
    </>
  );
};

export default Profile;
