import { type NextPage } from "next";
import Head from "next/head";

import { useRouter } from "next/router";
import { useState } from "react";
import Link from "next/link";

import { api } from "../../../../utils/api";
import Layout from "../../../../components/Layout";
const SingleUsersRestaurantApplication = () => {
  const router = useRouter();
  const { applicationId } = router.query;

  const usersRestaurantApplication =
    api.usersRestaurantApplication.getById.useQuery({
      id: String(applicationId),
    });

  const restaurant = api.restaurant.getById.useQuery({
    id: String(usersRestaurantApplication?.data?.restaurant_id),
  });
  const userName = api.user.getUsername.useQuery({
    id: usersRestaurantApplication?.data?.created_by_user_id || "",
  });
  const deleteApplication = api.usersRestaurantApplication.delete.useMutation();
  // const deletePhotos = api.photo.deleteByApplication.useMutation();
  const updateApplciation =
    api.usersRestaurantApplication.updateApplication.useMutation();
  // const updatePhoto = api.photo.handlePublish.useMutation();
  const createUsersRestaurant =
    api.usersRestaurant.addUsersRestaurant.useMutation();
  // const photos = api.photo.getByApplicationId.useQuery({
  //   id: String(applicationId),
  // });
  // const handleUpdate = (e: React.SyntheticEvent<HTMLFormElement>) => {
  //   e.preventDefault();
  //   const form = e.currentTarget;
  //   const formElements = form.elements as typeof form.elements & {
  //     name: { value: string };
  //     address: { value: string };
  //     city: { value: string };
  //     state: { value: string };
  //     zipCode: { value: string };
  //     cuisineType: { value: string };
  //     email: { value: string };
  //     website: { value: string };
  //     phone: { value: string };
  //     hoursInterval: { value: string };
  //   };
  //   if (restaurantApplication?.data)
  //     updateApplciation.mutate(
  //       {
  //         id: String(applicationId),
  //         name: formElements.name.value,
  //         address: formElements.address.value,
  //         cityName: formElements.city.value,
  //         stateName: formElements.state.value,
  //         zipCode: formElements.zipCode.value,
  //         email: formElements.email.value,
  //         phone: formElements.phone.value,
  //         website: formElements.website.value,
  //         hoursInterval: formElements.hoursInterval.value,
  //         cuisineType: formElements.cuisineType.value,
  //         status: "updated",
  //         created_by_user_id: restaurantApplication?.data?.created_by_user_id,
  //       },
  //       {
  //         async onSuccess() {
  //           await restaurantApplication.refetch();
  //           setEditMode(false);
  //         },
  //       }
  //     );
  // };
  const handleReject = (e: React.SyntheticEvent<HTMLButtonElement>) => {
    e.preventDefault();
    deleteApplication.mutate(
      { applicationId: String(applicationId) },
      {
        async onSuccess() {
          // deletePhotos.mutate({
          //   applicationid: String(applicationId),
          // });
          router.push("/restaurantApplications");
        },
      }
    );
  };
  const handlePublish = async (e: React.SyntheticEvent<HTMLButtonElement>) => {
    if (usersRestaurantApplication.data) {
      createUsersRestaurant.mutate(
        {
          restaurantId: usersRestaurantApplication.data?.restaurant_id || "0",
          userId: usersRestaurantApplication.data.created_by_user_id,
        },
        {
          async onSuccess(restaurantData) {
            if (usersRestaurantApplication.data)
              if (usersRestaurantApplication.data)
                updateApplciation.mutate({
                  status: "approved",
                  id: usersRestaurantApplication.data.id || "",
                  created_by_user_id:
                    usersRestaurantApplication.data.created_by_user_id || "",
                  restaurant_id:
                    usersRestaurantApplication.data.restaurant_id || "",
                });
            // updatePhoto.mutate({
            //   applicationId: restaurantApplication.data.id,
            //   restaurantId: restaurantData.id,
            // });

            // applications.refetch();
            // restaurantApplication.refetch();

            router.push(`/profile`);
          },
        }
      );
    }
  };

  if (usersRestaurantApplication.status === "loading") return <>loading</>;
  if (usersRestaurantApplication.status === "error") return <>error</>;
  if (usersRestaurantApplication.status === "success")
    return (
      <>
        <Head>
          <title>Foodley</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Layout>
          <div>
            <div className="flex flex-col gap-4">
              <div>
                {" "}
                {/* {photos.data && photos.data.length > 0 && (
                  <Image
                    width={200}
                    height={200}
                    src={photos.data ? String(photos.data.at(0)?.photoUrl) : ""}
                    alt="Restaurant Image"
                  />
                )} */}
                <div>
                  {`Application #${usersRestaurantApplication?.data?.id}`}{" "}
                </div>
                <div>
                  Application created---
                  {usersRestaurantApplication.data?.created_at.toLocaleDateString()}
                </div>
                <div>{`status: ${usersRestaurantApplication.data?.status}`}</div>
                <div>
                  <div>{`name: ${restaurant.data?.name}`}</div>
                </div>
                <Link
                  href={`/user/${usersRestaurantApplication?.data?.created_by_user_id}`}
                >
                  <div>{`created by : ${userName?.data}`}</div>
                </Link>
                <div className="flex w-32 flex-col gap-1">
                  <button
                    className="rounded-full bg-green-500 py-2 px-4 font-bold text-white hover:bg-green-700"
                    onClick={handlePublish}
                  >
                    Approve
                  </button>
                  <button
                    className="rounded-full bg-red-500 py-2 px-4 font-bold text-white hover:bg-red-700"
                    onClick={handleReject}
                  >
                    reject
                  </button>
                </div>
              </div>
            </div>
          </div>
        </Layout>
      </>
    );
};

export default SingleUsersRestaurantApplication;
