import { type NextPage } from "next";
import Head from "next/head";

import { api } from "../../../utils/api";
import { useRouter } from "next/router";
import Comment from "./Comment";
import FileUplod from "../../../components/FileUpload";

import Image from "next/image";
import Layout from "../../../components/Layout";
const SingleRestaurant: NextPage = () => {
  const router = useRouter();
  const { restaurantId } = router.query;

  const restaurant = api.restaurant.getById.useQuery({
    id: String(restaurantId),
  });

  const createComment = api.comment.createComment.useMutation();
  const comments = api.comment.getByRestaurantId.useQuery({
    id: String(restaurantId),
  });
  const createFavorite = api.favorite.createFavorite.useMutation();
  const deleteFavorite = api.favorite.delete.useMutation();
  const photos = api.photo.getByRestaurantId.useQuery({
    id: String(restaurantId),
  });
  const isFavorited = api.favorite.isRestaurantFavorited.useQuery({
    restaurantId: String(restaurantId),
  });
  const handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = e.currentTarget;
    const formElements = form.elements as typeof form.elements & {
      comment: { value: string };
    };
    createComment.mutate(
      { text: formElements.comment.value, restaurantId: String(restaurantId) },
      {
        async onSuccess() {
          await comments.refetch();
        },
      }
    );
  };

  const handleFavorite = (e: React.SyntheticEvent<HTMLButtonElement>) => {
    e.preventDefault();
    createFavorite.mutate(
      { placement: 1, restaurantId: String(restaurantId) },
      {
        async onSuccess() {
          await isFavorited.refetch();
        },
      }
    );
  };
  const handleUnfavorite = (e: React.SyntheticEvent<HTMLButtonElement>) => {
    e.preventDefault();
    deleteFavorite.mutate(
      { restaurantId: String(restaurantId) },
      {
        async onSuccess() {
          await isFavorited.refetch();
        },
      }
    );
  };

  if (restaurant.status === "loading") return <>loading</>;
  if (restaurant.status === "error") return <>error</>;
  if (restaurant.status === "success" && comments.status === "success")
    return (
      <>
        <Head>
          <title>Foodly</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Layout>
          <div>
            <div className="flex flex-col">
              <span className="text-lg">{restaurant.data?.name}</span>
            </div>
            {photos.data?.map((elem) => {
              return (
                <div>
                  <Image src={elem.photoUrl} alt="img" width={64} height={64} />{" "}
                </div>
              );
            })}
            <div className="bg-gray-100">
              <div>
                {isFavorited.data && isFavorited.data[0] ? (
                  <div>
                    {isFavorited.data[0]?.placement}
                    <button
                      disabled={false}
                      onClick={handleUnfavorite}
                      className="rounded-full bg-red-500 py-2 px-4 font-bold text-white hover:bg-red-700"
                    >
                      {" "}
                      Un-Favorite
                    </button>
                  </div>
                ) : (
                  <button
                    disabled={false}
                    onClick={handleFavorite}
                    className="rounded-full bg-blue-500 py-2 px-4 font-bold text-white hover:bg-blue-700"
                  >
                    {" "}
                    Favorite
                  </button>
                )}
              </div>
            </div>

            <div className="flex flex-col">
              {comments.data?.map((elem) => {
                return (
                  <div key={elem.id}>
                    <Comment userId={elem.user_id} text={elem.text} />
                  </div>
                );
              })}
            </div>
            <div>
              <form onSubmit={handleSubmit} className="flex w-96 flex-col">
                <textarea
                  rows={4}
                  name="comment"
                  className="bg-slate-100"
                ></textarea>
                <button type="submit">add</button>
              </form>
            </div>
            <FileUplod restaurantId={String(restaurantId)} />
          </div>
        </Layout>
      </>
    );
  else return <></>;
};

export default SingleRestaurant;
